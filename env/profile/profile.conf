#
# ---------- header -----------------------------------------------------------
#
# project       kaneton
#
# license       kaneton
#
# file          /home/mycure/kaneton/env/profile/profile.conf
#
# created       julien quintard   [mon may  7 20:33:41 2007]
# updated       julien quintard   [tue may  8 16:42:11 2007]
#

#
# ---------- information ------------------------------------------------------
#
# this file does not contain any configuration variable but instead
# briefly describe the configuration files organisation and syntax.
#
# the kaneton environment engine first get all variables and function
# declarations and then process them following the following layer ordering:
#
#   profile/
#   profile/environment
#   profile/environment/behaviour
#   profile/environment/behaviour/${KANETON_HOST}
#   profile/environment/behaviour/${KANETON_HOST}/${KANETON_ARCHITECTURE}
#   profile/kaneton
#   profile/kaneton/core
#   profile/kaneton/plateform
#   profile/kaneton/plateform/${KANETON_PLATEFORM}
#   profile/kaneton/architecture
#   profile/kaneton/architecture/${KANETON_ARCHITECTURE}
#   profile/user
#   profile/user/${KANETON_USER}
#
# in this layered model, a variable defined in behaviour can be overriden
# anywhere in the sub-layers.
#
# however, the environment and kaneton profiles are theoretically completed
# separated. the environment engine does not check such overridings, therefore
# the core configuration could override a variable previously defined in
# the behaviour profile.
#
# finally, the user profile can override any other definition.
#
# the environment engine looks in each profile for files suffixed by:
#   .desc: these files describe the variables defined by this profile
#   .conf: these files declare the variable defined by this profile
#   .mk: these files contain the make interface implementation
#   .py: these files contain the python interface implementation
#
# the engine supposes there is no variable or function overriding in
# a single profile.
#
# the .mk and .py files must provide the whole make and python interface
# but can also contain additional private functions.
#
# the configuration files .conf contain the variables declarations.
# the syntax of these files is explain below:
#
# to assign a value to a variable named VAR or override a previously
# defined variable VAR:
#
#   VAR = a value
#
# to complete a variable definition:
#
#   VAR += a value which is appended to the previous VAR's content
#
# shell variables and environment variables can also be used. then a
# kaneton variable i.e. a variable defined by a lower layer is accessed
# like this:
#
#   VAR = something from ${ANOTHER_VAR}
#
# shell variables can also be accessed:
#
#   VAR = the shell currently used is $(SHELL)
#
# finally a configuration file can include another one using the following
# construct:
#
#   include ../an/other/file/far/../far/../away
#
# the description files .desc describe the variables contained in the
# configuration files .conf. The syntax is such descriptions files are
# explained next.
#
# each variable description is contained in a section which is enclosed
# between braces. a section contains specific fields which need to be
# defined.
#
# VAR
# {
#   [an example variable]
#
#   <value1> a first possible value
#   <value2> another possible value
#
#   and then a description of the variable which will be displayed
#   in the configuration software.
# }
#
# in this syntax, the first token is the name of the variable, for instance,
# VAR. then, the name of the entry displayed in the configuration software
# is enclosed between brackets: [an example variable].
#
# then optional values are then described. if these values are not
# defined, then the variable si considered to receive any value. otherwise,
# the variable can receive only on the the defined value. the optional values
# are enclosed between angle brackets and followed by a human-readable
# literal string which will be displayed by the software.
#
# finally, the remaining text is considered as a description of the
# variable. this description is very important to the end-user.
#
