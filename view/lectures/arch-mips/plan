mipsr3000
---------

1) Overview
===========

a) intro

- pas de memoire virtuelle

architecture externe = ce que voit le programmeur:
 . registres visibles
 . adressage memoire
 . jeu d instructions
 . mecanisme traitement interruptions/exceptions

- processeur 32bits industriel concu dans les annees 80.

- jeu d'inst de type RISC.

- plusieurs realisation indus: SIEMENS, NEC, LSI LOGIC, SILICON GRAPHICS ...

- archi suffisamment simple pour etre etudier et suffisamment puissante
  pour supporter un systeme multi-tache tel qu UNIX.

b) registres visibles

--- registres non proteges

35 registres visibles:

- 0 a 31: Ri (R0 trask register, R31 link register)
- pc: program counter
- hi et lo: mult et div

--- registres proteges

SR: Status register: le bit qui definit le mode: superuser/user
CR: Cause register: definit la cause pour laquelle une
    interruption/exception est signalee.
EPC: Exception Program Counter: PC ou ca a chier pour une exception
     sinon contient l'adresse de retour (PC+4) dans le cas d'une int.
BAR: Bad address register: en cas d'exception de type adresse illegale
     contient la valeur de l adresse foireuse.

c) adressage

adresse codees sur 32 bits. instructions codees sur 32 bits.

les echange avec la memoire se font en mot (4 octets), demi mot (2 octets)
ou par octet.

le processeur respecte la convention little endian (bits de poids faibles
en premier dans la memoire).

de plus les adresses doivent etre alignees: ex si on accede a un demi
mot, son adresse doit etre multiple de 2.

d) segmentation

l'espace memoire est decoupe en 2 segments identifies par le bit
de poids fort de l'adresse:

 0[user][superuser]2^32-1

e) jeu d'instructions

le processeur possede 57 instructions repartis en 4 classes:

. 33 instructions arithmetiques/logiques entre registres
. 12 instructinos de branchement
. 7 instructions de lecture/ecriture memoire
. 5 instructions systeme

toutes les instructions ont une longueur de 32 bits et possedent un
des trois formats suivant:

R: [OPCODE=6][RS=5][RT=5] [RD=5][SHAM=5][FUNC=6]

I: [OPCODE=6][RS=5][RT=5] [IMMED=16]

J: [OPCODE=6][IMMED=26]

Le format J n'est utilise que pour les branchements a longue distance
(inconditionnels).

Le format I est utilise par les instructions de lect/ecriture memoire,
par les instructions utilisant un oeprande immediant, ainsi que par les
branchements courte distance (conditionnels)

Le format R est utilise par les instructions necessitant 2 registres sources
(RS et RT) et un registre resultat RD.

Le jeu d'instructions est oriente registres. Cela signifie que toutes
les operations manipulent des registres et rangent le resultat dans
un registres.

Les seules instructions manipulant de la memoire se contente de lire
de la memoire et de ranger le resultat dans un registre.

Si on avait a comparer:

  int a, b, res;

  res = a + b

en RISC et CISC:

CISC (comme le gros processeur VAX):

  add [res], [a], [b]

RISC (comme MIPS):

  lw R4, [a]
  lw R5, [b]
  add R6, R4, R5
  sw R6, [res]

XXX exemples d'instructions avec overflow et immediats
XXX shifts etc.. (page 1 cours croc) + mes cours

f) exceptions et interruptions

il existe 4 types d'evenements qui peuvent interrompre l'execution
normale d'un programme:

. les exceptions
. les interruptions
. les appels systemes (instructions SYSCALL et BREAK)
. le signal RESET

Nous ne listerons pas les exceptions ou interruptions car cela n'est
pas le but du cours.

Lorsqu'une interruption ou une exception survient, le programme courant
est temporairement arrete et la routine situee a l'adresse 0x80000080
est execute: c'est le handler d'exceptions/interruptions.

Dans cette version du MIPS, toutes les exceptions sont fatales, ainsi
aucune adresse de retour n'est sauvegarder.

Le processeur MIPS possede 6 lignes d'interruptions. Comme pour les
processeurs modernes il est possible de masquer toutes les interruptions
ou simplement certaines.

L'instruction BREAK sert a poser des points d'arret.

Voila une breve introduction au processeur MIPS. Le but de ce cours n'est
pas l'etude de l'architecture externe mais plutot de l'architecture interne.
C'est pourquoi cette introduction passe tres rapidement sur l'architecture
externe juste pour avoir une idee de ses possibilites.

2) Processeurs RISC
===================

Loi de Moore + courbe.

Depuis les annees 50, les processeur CISC ne cessaient d'evoluer
et de grossir, fournissant toujours de plus gros set d'instructions
avec des instructions plus puissantes.

En effet, a l'epoque, le but etait de se rapprocher du langage
haut niveau car les chercheurs remarquaient bien facilement qu'il
semblait bien meilleur de fournir une instruction pour faire une
addition entre deux mots memoire car cela revient a faire une addition
de deux variables, choses tres courante.

Les concepteurs du RISC a l'inverse se disaient que plutot que d'executer
une grosse instruction add en 5 cycles ils allaient plutot essayer
d'executer les 4 instructions RISC en 1 cycle chacune soit 4 cycles.

Le but du RISC etait au contraire de s'eloigner du langage haut niveau
et de fournir un jeu d'instruction tres simple mais tres rapide.

Le but d'un concepteur de processeur est de choisir le jeu d'instruction.
Ce jeu d'instruction n'est pas choisi a la legere surtout dans le cas
d'un processeur RISC. Souvenez vous que les opcodes coutent chers.

