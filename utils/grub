#!/bin/sh
## copyright quintard julien
## 
## kaneton
## 
## grub.sh
## 
## path          /home/mycure/kaneton
## 
## made by mycure
##         quintard julien   [quinta_j@epita.fr]
## 
## started on    Fri Feb 11 02:18:00 2005   mycure
## last update   Mon Oct 10 18:20:33 2005   mycure
##

# INFORMATIONS
#
# this script has to be run in the directory src/utils



# CONFIGURATION FILE PATH
#
# configuration file
CONF="../conf/"$USER"/"$USER".conf"
MODULES=`sed "s/#.*//g" ../conf/"$USER"/modules.conf | grep -v "^$"`



# CONFIGURATION FILE VARIABLES
#
# default globals
ADDRESS="unknown"
TFTP_ADDRESS="unknown"
TFTP_DIRECTOR="unknown"
BOOTMODE="unknown"
UDEVICE="unknown"
MDEVICE="unknown"
IMAGE="unknown"

KANETON_IMAGE="data/kaneton.img"
MENU="/tmp/menu.lst"



# READ CONFIGURATION FILE
#
# function used to read the configuration file and to load
# important variables
read_kaneton_conf()
{
  # address
  ADDRESS=`cat $CONF | grep -E "^_ADDRESS_ = .*$" | cut -b 13-`

  # tftp address
  TFTP_ADDRESS=`cat $CONF | grep -E "^_TFTP_ADDRESS_ = .*$" | cut -b 18-`

  # tftp directory
  TFTP_DIRECTORY=`cat $CONF | grep -E "^_TFTP_DIRECTORY_ = .*$" | cut -b 20-`

  # bootmode
  BOOTMODE=`cat $CONF | grep -E "^_BOOTMODE_ = .*$" | cut -b 14-`

  # unix device
  UDEVICE=`cat $CONF | grep -E "^_UDEVICE_ = .*$" | cut -b 13-`

  # mtools device
  MDEVICE=`cat $CONF | grep -E "^_MDEVICE_ = .*$" | cut -b 13-`

  # image
  IMAGE=`cat $CONF | grep -E "^_IMAGE_ = .*$" | cut -b 11-`
}



# USAGE
#
# this function displays the usage but does not exit
usage()
{
  display " usage: grub.sh build|install" "!"
}



# WARNING
#
# this function alerts the user, displaying information and asking to continue
warning()
{
  # display information and ask the user to continue or cancel
  display " your current configuration" "+"
  display "   address:                  $ADDRESS" "+"
  display "   tftp address:             $TFTP_ADDRESS" "+"
  display "   tftp directory:           $TFTP_DIRECTORY" "+"
  display "   bootmode:                 $BOOTMODE" "+"
  display "   udevice:                  $UDEVICE" "+"
  display "   mdevice:                  $MDEVICE" "+"
  display "   image:                    $IMAGE" "+"
  display ""
  display " to cancel press CTRL^C, otherwise press enter" "?"

  NEEDLESS=""
  read NEEDLESS
}



# MENU
#
# this function creates the grub menu file
menu()
{
  # remove old version
  rm -f $MENU 2>&1 > /dev/null

  # create new version
  echo "title kaneton" >> $MENU
  echo "" >> $MENU

  # insert each module in menu

  case "$BOOTMODE" in
    "floppy"|"floppy-image")
      echo "root (fd0)" >> $MENU
      echo "" >> $MENU
      ;;

    "tftp")
      echo "ifconfig --address=$ADDRESS --server=$TFTP_ADDRESS" >> $MENU
      echo "" >> $MENU
      echo "root (nd)" >> $MENU
      echo "" >> $MENU
      ;;

    *)
      display " unknown mode \"$BOOTMODE\"" "!"
      display ""
      display " please check your BOOTMODE variable in $CONF" "!"
      display ""
      usage
      display " supported boot modes for grub are:" "!"
      display "      floppy-image" "!"
      display "      floppy" "!"
      display "      tftp" "!"
      exit
      ;;
  esac

  i=0
  for module in $MODULES ; do
    if [ $i = 0 ] ; then
      kernel=$module
    else
      modules="$modules $module"
    fi
    i=1
  done

  echo $kernel | sed "s/^.*\/\(.*\)$/kernel \/modules\/\1/g" >> $MENU

  echo "" >> $MENU

  for module in $modules
  do
      echo $module | sed "s/^.*\/\(.*\)$/module \/modules\/\1/g" >> $MENU
  done
}



# BUILD
#
# initialise the boot device
build()
{
  case "$BOOTMODE" in
    "floppy"|"tftp")
      cat $KANETON_IMAGE > $UDEVICE
      ;;

    "floppy-image")
      cp $KANETON_IMAGE $IMAGE
      ;;

    *)
      display " unknown mode \"$BOOTMODE\"" "!"
      display ""
      display " please check your BOOTMODE variable in $CONF" "!"
      display ""
      usage
      display " current supported boot modes for grub are:" "!" 
      display "      floppy-image" "!"
      display "      floppy" "!"
      display "      tftp" "!"
      exit
      ;;
  esac
}



# INSTALL
#
# installs the distribution on the boot device
install()
{
  case "$BOOTMODE" in
    "floppy")
      if [ ! -f $MENU ] ; then
        display " $MENU" "!"
      else
        mcopy -n -o $MENU $MDEVICE/boot/grub/
        display " $MENU" "+"
      fi

      for module in $MODULES ; do
        if [ ! -f ../$module ] ; then
          display " $module" "!"
        else
          mcopy -n -o ../$module $MDEVICE/modules/
          display " $module" "+"
        fi
      done
      display ""
      ;;

    "tftp")
      if [ ! -f $MENU ] ; then
        display " $MENU" "!"
      else
        mcopy -n -o $MENU $MDEVICE/boot/grub/
        display " $MENU" "+"
      fi

      for module in $MODULES ; do
        if [ ! -f ../$module ] ; then
          display " $module" "!"
        else
          cp ../$module $TFTP_DIRECTORY
          display " $module" "+"
        fi
      done
      display ""
      ;;

    "floppy-image")
      if [ ! -f $MENU ] ; then
        display " $MENU" "!"
      else
        mcopy -n -o $MENU -i $IMAGE ::/boot/grub/
        display " $MENU" "+"
      fi

      for module in $MODULES ; do
        if [ ! -f ../$module ] ; then
          display " $module" "!"
        else
          mcopy -n -o ../$module -i $IMAGE ::/modules/
          display " $module" "+"
        fi
      done
      display ""
      ;;

    *)
      display " unknown mode \"$BOOTMODE\"" "!"
      display ""
      display " please check your BOOTMODE variable in $CONF" "!"
      display ""
      usage
      display " current supported boot modes for grub are:" "!"
      display "      floppy-image" "!"
      display "      floppy" "!"
      display "      tftp" "!"
      exit
      ;;
  esac
}



# PRINT A MESSAGE
#
# prints a message using the user variable DISPLAY
print()
{
  color=$1
  message=$2
  options=$3

  if [ $DISPLAY = "color" ] ; then

    case "$color" in
      "red")
        echo -e $options '\E[;31m'"\033[1m$message\033[0m"
	;;

      "green")
        echo -e $options '\E[;32m'"\033[1m$message\033[0m"
	;;

      "yellow")
        echo -e $options '\E[;33m'"\033[1m$message\033[0m"
	;;

      "blue")
        echo -e $options '\E[;34m'"\033[1m$message\033[0m"
	;;

      "white")
        echo -e $options '\E[;37m'"\033[1m$message\033[0m"
	;;

      *)
	;;
    esac

  else

    echo $options "$message"

  fi
}



# DISPLAY A MESSAGE
#
# displays a message with a header
display()
{
  msg=$1
  header=$2

  case "$header" in
    "+")
      print "blue" "[" "-n"
      print "green" "+" "-n"
      print "blue" "]" "-n"
      ;;

    "!")
      print "blue" "[" "-n"
      print "red" "!" "-n"
      print "blue" "]" "-n"
      ;;

    "?")
      print "blue" "[" "-n"
      print "yellow" "?" "-n"
      print "blue" "]" "-n"
      ;;

    *)
      ;;
  esac

  print "white" "$msg" ""
}



# ENTRY POINT
#
# entry point of this script

# check the number of arguments
if [ $# -lt 1 ] ; then
    usage
    exit -1
fi

action="$1"
shift

case "$action" in
  "build")
    # initialising boot system

    # call the read_kaneton_conf function
    read_kaneton_conf

    display " initialising boot system" "+"
    display ""

    # call the warning function
    warning

    # call the init function
    build

    # boot system initialised
    display " boot system initialised successfully" "+"
    ;;

  "install")
    # initialising boot system

    # call the read_kaneton_conf function
    read_kaneton_conf

    display " initialising boot system" "+"
    display ""

    # call the warning function
    warning

    # call the menu function
    menu

    # call the install function
    install

    # boot system initialised
    display " boot system initialised successfully" "+"
    ;;

  *)
    display " unknown action \"$action\"" "!"
    display ""
    usage
    exit
    ;;
esac
