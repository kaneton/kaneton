--
 Choses a finir (matthieu) :

 * finir le test as/06
 * coder region_resize
 * tester region_coalesce
 * revoir le  malloc de  la libc pour  qu'il soit generique.  faire un
   systeme  avec deux  pointeurs  de fonctions  sur mmap/munmap)  voir
   aussi l'histoire du cache d'objets pour les mallocs pendant malloc.
 * debugger task et sched
 * faire les tests pour task
 * tests pour sched !?

 Bugs connus :

 * region_split : ne marche pas
 * segment_resize : cas particuliers (1er/dernier segments)
 * bootloader/02 et bootloader/03 ne passent plus
 * set_array_locate : dicho desactivée
 * ia32_region_reserve : cas particulier (pt vide)

 Autre :

 * trouver un moyen de reduire le  code du kernel a mapper dans chaque
   as.  pour  l'instant il  y  a  besoin de  la  stack  kernel et  des
   prehandlers d'exceptions et d'irq.  pour l'instant, tout les kernel
   est mappé dans chaque as.
 * faire des tests pour time
 * refaire des tests plus poussés pour event
 * revoir les timers dans stats
 * faire un vrai realloc

--
 mettre a jour la doc sur les interfaces make et shell + options

 locate-prog -> locate
 locate -> lookup
 launch + -make -python -shell -perl
 find-files -> find
 tags-clean -> temp --file + for + substitute + echo > $tmp
 cut-code -> cut (a utiliser dans preprocess)
 svn-clean -> find --directory .svn + remove

 les options ont change pour beaucoup de fonctions

--
 enlever QUICKSTART et expliquer ce qu'il faut sur le site

--
 verifier que dans chaque manager il y a:

   machdep_include()
   tous les machdep_call()

   la variable globale correspondante au manager

--
 au lancement du core, celui-ci genere un nombre sur 64-bit.

 ce nombre va devenir son machine-id.

 de plus son node-id va etre calcule de la maniere suivante:

   node-id = hash(machine-id + 0)

 ou '+' designe la concatenation de donnees.

 plus tard, chaque tache pourra simplement calcule son node-id avec:

   node-id = hash(machine-id + task-id)

 ainsi chaque tache du systeme reparti aura un node-id unique et de plus
 les cores a leurs lancements auront un id, ce qui est requis pour la
 generation des capabilities.

--
 finalement on va surement avoir besoin de mapper les modules pour que
 le core puisse extraire le premier module et le lancer.

--
 tous les profiles machines sauf gnu-unix sont foireux

 il faudra les mettre a jour enfin les refaire plutot

--
 virer les CFLAGS = ___kernel c'est trop laid/specifique

--
 revoir la doc: apparamment les etudiants ne comprennent pas instinctivement
 qu il y a trois parties bien distinctes: core, machdep, libarch

--
 refaire la moulinette de tests pour qu elle soit propre

--
 pour resoudre les forward declarations, normalement faire comme set.h
 et ca marche, cad forward declarer tous les types d'un .h AVANT de
 faire les includes recursifs.

--
 ce serait interessant de rajouter un ensemble 'slab' qui ne se baserait
 pas sur malloc.

 ca montrerait la possibilite du set manager et en plus on pourrait faire
 des tests de perf avec le slab.

--
 etudier le SMP pour pouvoir faire evoluer kaneton vers ca.

 faire un cpu manager pour que les process puissent decider sur quels
 cpus ils peuvent tourner.

--
 probleme de nomenclature: chiche_get(o* o) ca marche pour recuperer un
 objet mais quand ce seront des programs userland, recuperer l objet
 entier ca ne les interesse pas, c'est lourd et c est pas le but.

 donc on devrait changer pour mettre a disposition des fonctions pour
 recuperer que certaines proprietes.

--
 revoir le bootloader:

  t_modules
  {
    + t_module* modules;
  }
  t_module
  {
    + void* content;
    + t_module* next;
  }

--
 revoir la moulinette de triche, a la limite retoucher le code de ctcompare

--
 pour le probleme de dependance entre segments et malloc() il suffit d'avoir
 un cache d'objets segment dans le manager de segment. et le segment
 manager pioche dedans pour ajouter des segments. donc set_reserve()
 sans l'option ALLOC.

 il suffit de calculer la limite d'appels recursifs a segment et d'en
 deduire la taille du cache, par exemple 3, pour etre sur disons 5.

--
 les images microkernel_examples_* dans seminar sont a passer au format xfig

--
 il faut prevoir que tout le demarrage des services via fichier de conf
 doit pouvoir etre fait en dynamique. par exemple si mod reserve un
 segment special (CATCH) pour le service tty (console) et bien il faut
 imaginer que si on lance ce meme serveur a la main une fois le systeme
 boote, soit le systeme de lui meme (via un fichier de conf) sait quels
 sont les objets dont il herite ou alors il faut prevoir des messages style
 segment_acquire() pour acquerir un segment specifique: la memoire video.

--
 pour tester la moulette avec un seul pc : QEMU, avec l'option "-serial pty"
 et changer en dur le device dans check.py.

--
 nettoyer conf.h, debug.h, check.h rendre tout ca coherent car la c'est
 un peu le bordel.

 faire que tout ce qui touche a conf soit genere et qu il n y ait plus
 conf.c et conf.h

--
 hevea -exec xxdate.exe kaneton.tex pour generer du html

 latex -> html: HeVeA

 ca aurait ete bien un make web mais bon c'est mort.

--
 trouver un moyen de gerer un systeme d'evenements intra kernel. soit
 comme unix soit on fait differemment. sleep/wakeup

 en fait le systeme des pthreads est vraiment pas mal avec les condition
 variables ayant un mutex associe.

--
 segment:

 il faudra rajouter dans le bootloader init.c un segment correspondant
 au dma: SEGMENT_TYPE_CATCH

 on pourrait imaginer dans le fichier de conf dire que telle zone
 est en mode catch et qu elle est catchable que par telle tache (avec
 tel nom par exemple)

 en fait revoir le concept de catch car c'est quand meme pas clair encore.

-- norme commit
  [core/kaneton/set/set_bpt.c]
    1) init function updated to properly handle set options.
    2) ...

  [core/kaneton/kaneton.c]
    1) ...

  -> les points 1,2,3 etc.. sont pas ordre d'importance
