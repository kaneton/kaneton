
#
# core interface.c header
#

def header_kinterface(f)
  f.puts "/*
 * project       kaneton
 *
 * generated by gen_interface.rb
 *
 */

/*
 * ---------- information -----------------------------------------------------
 *
 * this file describes the core's interface.
 *
 * in other words, this file describes the services provided by the kernel
 * so the core functions a task is allowed to use.
 *
 * each time a message is destinated to the core, the corresponding
 * function of the interface is launched.
 */

/*
 * ---------- includes --------------------------------------------------------
 */

#include <libc.h>
#include <kaneton.h>

/*
 * ---------- externs ---------------------------------------------------------
 */

extern i_task		ktask;

/*
 * ---------- functions -------------------------------------------------------
 */

"
end

#
# core interface.c footer
#

def footer_kinterface(f)
  f.puts "/*
 * this function receives, dispatch and reply incoming system calls.
 *
 * steps:
 *
 * 1) check for syscall correctness.
 * 2) execute the system call.
 * 3) send the reply.
 */

t_status			interface_notify(t_uint8*		buffer,
					 t_vsize		size,
					 i_node			source)
{
  o_syscall*		message = (o_syscall*)buffer;

  /*
   * 1)
   */

  if (size < sizeof (o_syscall))
    return (STATUS_UNKNOWN_ERROR);

  if (message->u.request.operation >= INTERFACE_NSYSCALLS)
    return (STATUS_UNKNOWN_ERROR);

  /*
   * 2)
   */

  if (dispatch[message->u.request.operation](message) != STATUS_OK)
    return (STATUS_UNKNOWN_ERROR);

  /*
   * 3)
   */

  if (message_send(ktask,
		   source,
		   MESSAGE_TYPE_INTERFACE,
		   (t_vaddr)message,
		   sizeof (o_syscall)) != STATUS_OK)
    return (STATUS_UNKNOWN_ERROR);

  return (STATUS_OK);
}

/*
 * this function initialises the interface manager.
 */

t_status			interface_initialize(void)
{
  if (message_register(ktask, 0, sizeof (o_syscall)) != STATUS_OK)
    return (STATUS_UNKNOWN_ERROR);

  return (STATUS_OK);
}

/*
 * this function cleans the interface manager.
 */

t_status			interface_clean(void)
{
  return (STATUS_OK);
}
"
end


#
# core interface.h header
#

def header_hinterface(f)
  f.puts "/*
 * project       kaneton
 *
 * generated by gen_interface.rb
 *
 */

#ifndef CORE_INTERFACE_H
#define CORE_INTERFACE_H	1

/*
 * ---------- dependencies ----------------------------------------------------
 */

#include <core/id.h>
#include <core/types.h>

#include <machine/machine.h>

"
end

#
# core interface.h footer
#

def footer_hinterface(f)
  f.puts "/*
 * ---------- prototypes ------------------------------------------------------
 *
 *      ../../core/interface/interface.c
 */


/*
 * eop
 */

#endif"
end

#
# user interface.c header
#

def header_uinterface(f)
  f.puts "/*
 * project       kaneton
 *
 * generated by gen_interface.rb
 *
 */

/*
 * ---------- information -----------------------------------------------------
 *
 * this file implements user side of system calls.
 *
 */

/*
 * ---------- includes --------------------------------------------------------
 */

#include <libc.h>
#include <core/core.h>
#include <libkaneton.h>

/*
 * ---------- functions -------------------------------------------------------
 */

"
end

#
# user interface.c footer
#

def footer_uinterface(f)
  f.puts ""
end

