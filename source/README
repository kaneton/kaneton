##
## copyright quintard julien
## 
## kaneton
## 
## README
## 
## path          /home/mycure/kaneton/core/kaneton
## 
## made by mycure
##         quintard julien   [quinta_j@epita.fr]
## 
## started on    Fri Feb 11 14:05:03 2005   mycure
## last update   Sat Jun 18 15:14:07 2005   mycure
##

			----------[ conf ]----------

a kaneton developer has to fill three configuration files located at:

			src/conf/$USER/

---[ $USER.conf

  this file describes the development environment, architecture variables
  compiling variables etc..

---[ modules.conf

  this file lists the files to be loaded by the bootloader.

---[ kaneton.conf

  this file describes the kaneton kernel with many parameters.

			----------[ env ]----------

a development environment describes binaries, compiling options,
linking options etc.. to use when developing kaneton.

a different environment exists for each operating system. for more information
take a look to the env/ directory.

each environment, directory is composed of one (but can be more) file:

---[ kaneton.mk

  this file describes the makefile dependencies to use to compile the
  kaneton kernel.

  so, you can here specify compile and linking options but also binaries
  to use.

			----------[ make ]----------

first a developer has to install a development environment:

	make init

then he is able to compile:

	make kaneton

when finished, the developer then wants to test his kernel either on
another machine or in an emulator, so he has to build a floppy. before all,
he must initialize the boot device with the kaneton boot device format:

	make build

then the developer just has to install the kernel and modules on the boot
device:

	make install

after all, the boot device is ready.

---[ init

syntax:		make init

  this command will create the working environment like scripts, makefiles,
  dependencies etc..

  this script has to be ran before any another make.

  note that by default this command will be run if never launched before.

---[ clean

syntax:		make clean

  this command cleans the working environment, which is useful before
  committing or packaging.

---[ kaneton

syntax:		make kaneton

  this command will create the kernel, the modules etc..

---[ clear

syntax:		make clear

  this command will clear the development tree.

---[ proto

syntax:		make proto

  this command will create header prototypes.

---[ dep

syntax:		make dep

  this command will generate every C file dependencies.

---[ build

syntax:		make build

  this command will create an initial bootable device.

---[ install

syntax:		make install

  this command copies the kernel and modules on the bootable device.

---[ check

syntax:		make check

  this command runs tests to validate the current kaneton version.

			----------[ makefiles ]----------

a portable makefiles system is provided for the kaneton project. each
makefile of the project uses either functions defined in the kaneton.mk
makefile dependency located in the directory env/{operating system}/kaneton.mk
or directly defined commands like $(_MAKE_) or $(_CD_) etc..

this system leads to a central system, so to simpler portability.

this system uses few functions explained below.

for more informations, take a look at a kaneton.mk makefile dependency.

the syntax used to call a function in a makefile is:

	$(call thisfunctionisinteresting,argument1,argument2,argument3)

---[ pretty-printer

  this function is used to pretty print a message. any action performed
  by a makefile is displayed, so this function is called.

  arguments:

    1:		the color used to display the action name
    2:		the name of the action performed
    3:		the file on which the action is performed
    4:		the identation between the action name and the file name

---[ compile-c

  this function is used to compiler a C file to produce an object file.

  arguments:

    1:		the object file name
    2:		the C file name
    3:		advanced options like additional C flags

---[ compile-S

  this function is used to compile a S file to produce an object file.

  arguments:

    1:		the object file name
    2:		the S file name
    3:		advanced options

---[ compile-asm

  this function is used to compile a asm file to produce an object file.

  arguments:

    1:		the object file name
    2:		the asm file name
    3:		advanced options

---[ archive

  this function is used to group object files into one archive.

  arguments:

    1:		the archive file name
    2:		the object file names
    3:		advanced options

---[ archives

  this function is used to build an archive from different archives.

  arguments:

    1:		the archive file name
    2:		the archive file names
    3:		advanced options

---[ static-linker

  this function is used to call the static linker, so to build a
  static library from an archive.

  arguments:

    1:		the archive file name
    2:		advanced options

---[ dynamic-linker

  this function is used to call the dynamic linker, so to build dynamic
  libraries or binaries.

  arguments:

    1:		library file name
    2:		objects and/or archives and/or libraries file names
    3:		advanced options

---[ remove

  this function is called to remove files.

  arguments:

    1:		the file names
    2:		advanced options

---[ prototypes

  this function is called to build prototypes in header files.

  arguments:

    1:		the header file name
    2:		advanced options

---[ link

  this function build a symbolic link to a file.

  arguments:

    1:		the file name to create so the symbolic link
    2:		the destination file name
    3:		advanced options

---[ purge

  this function is used to clean the current directory from useless files
  like emacs backups (~ files) etc..

  no argument

---[ dependencies

  this function generates makefile rules for C files dependencies. this
  is especially useful for header file dependencies.

  arguments:

    1:		the files for which the dependencies have to be generated
    2:		the output file which will contain makefile rules
    3:		advanced options

---[ version

  this function generates a version file containing a string describing
  the kernel version: date, user, host machine, title, version etc..

  argument:

    1:		the version file to generate
