
# environment/profile/
# ---------- test.desc --------------------------------------------------------
#

#
# _BAR_
#
- variable: _BAR_
  name: the bar parameter
  values: [avale: suce, leche: avale mon cul, ingurgite: chiche] # set
  values: [branle, avale] # state
  description: |
    ``This is another parameter which can take three values: simple,
      normal and optimised.''

# configure/
# ---------- menu.desc --------------------------------------------------------
#

- frame: a sub-section
  path: subsection/menu.desc
  description: |
    "This sub-section focuses on kaneton optimisations."

- variable: _FOO_

- variable: _BAR_

- variable: _CHICHE_

#
# ---------- parser.py --------------------------------------------------------
#

import yaml

stream = yaml.load(file("TEST.YML", "r"))

values = stream[0]["values"]

print values.__class__

print values

if values == None:
  print "--- any"
elif isinstance(values, list) and					\
   len(values) == 2 and							\
   isinstance(values[0], str):
  print "--- state"
elif isinstance(values, list) and					\
     isinstance(values[0], dict):
  print "--- set"
else:
  print "--- error"

#
# ---------- infos ------------------------------------------------------------
#

il va falloir construire un db assez complete avec pour chaque variable:

 - nom de la variable
 - valeurs non process: originale + liste d'append [?]
 - valeur finale
 - description associee
 - dans quel fichier on a cette valeur [?]

c'est un outil pour l'utilisateur final et pas un editeur de fichier
ce configuration. donc inutile d'afficher tous les appends pour que
le mec puisse savoir exactement ce qu'il doit affecter etc..

NON!

on affiche la valeur finale, si l'utilisateur on affecte une nouvelle
on ne cherche pas a comprendre et on branle la nouvelle valeur dans le
profile user, c'est tout! c'est primitif mais sinon ca devient trop
complique pour l'utilisateur final qui devrait du coup comprendre le
fonctionnement de notre systeme de conf et lui il s'en bat les couilles
sur un parcmetre.

[!] attention, au moins affiche la valeur non process pour que le user
puisse, s'il le veut, utiliser les definitions. par exemple on peut
affiche en mode simple par defaut, et via une touche activer un autre
affichage. genre l'entree 'expert' pourrait afficher l'arbre des
redefinitions ainsi que la valeur finale non processee. OK pour l'affichage
mais le mode expert ne doit permettre de faire des trucs plus evolues genre
append etc.. car si l'utilisateur est avance et bien il n'a qu'a aller editer
son profile a la main.

   [OK] [Advanced] [Help]

XXX peut etre qu'une checklisit (m/N) serait pas mal. sur le moment je ne
vois pas de cas ou c'est utile donc autant repousse l'implem car pour l'instant
on s'en passera
XXX peut etre aussi rajouter un type path pour un chemin vers quelque part
meme si en theorie tous les chemins sont dans des vars donc inutile
XXX peut etre aussi un range
