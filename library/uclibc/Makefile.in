# Makefile for uClibc
#
# Copyright (C) 2000-2005 Erik Andersen <andersen@uclibc.org>
#
# Licensed under the LGPL v2.1, see the file COPYING.LIB in this tarball.
#

#--------------------------------------------------------------
# You shouldn't need to mess with anything beyond this point...
#--------------------------------------------------------------
noconfig_targets := menuconfig config oldconfig silentoldconfig randconfig \
	defconfig allyesconfig allnoconfig clean distclean \
	release dist tags

include $(top_builddir)Rules.mak
sub_headers := headers

ifeq ($(HAVE_DOT_CONFIG),y)

all: pregen libs links

links:
	@$(LN) -sf lib/libc.a $(top_srcdir)
	@$(LN) -sf lib/libm.a $(top_srcdir)
	@$(LN) -sf lib/libcrypt.a $(top_srcdir)
	@$(LN) -sf lib/crt1.o $(top_srcdir)

# In this section, we need .config
-include .config.cmd

#include $(top_srcdir)ldso/Makefile.in
include $(top_srcdir)libcrypt/Makefile.in
#include $(top_srcdir)libintl/Makefile.in
include $(top_srcdir)libm/Makefile.in
#include $(top_srcdir)libnsl/Makefile.in
#include $(top_srcdir)libresolv/Makefile.in
#include $(top_srcdir)libutil/Makefile.in
#include $(top_srcdir)libpthread/Makefile.in
#include $(top_srcdir)librt/Makefile.in
#include $(top_srcdir)extra/locale/Makefile.in

# last included to catch all the objects added by others (locales/threads)
include $(top_srcdir)libc/Makefile.in

include/bits/uClibc_config.h:
	$(Q)$(INSTALL) -d $(dir $@)
	$(Q)@$< -o $(top_srcdir)extra/Configs/Config.in
	$(top_srcdir)extra/scripts/conf-header.sh .config > include/bits/uClibc_config.h


# For the moment, we have to keep re-running this target
# because the fix includes scripts rely on pre-processers
# in order to generate the headers correctly :(.  That
# means we can't use the $(HOSTCC) in order to get the
# correct output.
ifeq ($(ARCH_USE_MMU),y)
export header_extra_args =
else
export header_extra_args = -n
endif
HEADERS_BITS_COMMON := $(notdir $(wildcard $(top_srcdir)libc/sysdeps/linux/common/bits/*.h))
HEADERS_BITS_ARCH   := $(notdir $(wildcard $(top_srcdir)libc/sysdeps/linux/$(TARGET_ARCH)/bits/*.h))
HEADERS_BITS_SUBARCH   := $(notdir $(wildcard $(top_srcdir)libc/sysdeps/linux/$(TARGET_ARCH)/bits/$(TARGET_SUBARCH)/*.h))
HEADERS_BITS_COMMON := $(filter-out $(HEADERS_BITS_ARCH) $(HEADERS_BITS_SUBARCH),$(HEADERS_BITS_COMMON))
headers: include/bits/uClibc_config.h
	$(Q)$(MAKE) headers-y
	$(Q)\
	set -e; \
	if [ -e libc/sysdeps/linux/$(TARGET_ARCH)/fpu_control.h ] ; then \
		$(LN) -fs ../libc/sysdeps/linux/$(TARGET_ARCH)/fpu_control.h include/ ; \
	else \
		$(LN) -fs ../libc/sysdeps/linux/common/fpu_control.h include/ ; \
	fi; \
	for f in dl-osinfo.h hp-timing.h ; do \
		$(LN) -fs ../libc/sysdeps/linux/common/$$f include/ ; \
	done
	$(Q)\
	cd include/bits; \
	set -e; \
	for i in $(HEADERS_BITS_COMMON) ; do \
		$(LN) -fs ../../libc/sysdeps/linux/common/bits/$$i .; \
	done; \
	for i in $(HEADERS_BITS_ARCH) ; do \
		$(LN) -fs ../../libc/sysdeps/linux/$(TARGET_ARCH)/bits/$$i .; \
	done; \
	for i in $(HEADERS_BITS_SUBARCH) ; do \
		$(LN) -fs ../../libc/sysdeps/linux/$(TARGET_ARCH)/bits/$(TARGET_SUBARCH)/$$i .; \
	done
	$(Q)\
	cd include/sys; \
	set -e; \
	for i in `ls ../../libc/sysdeps/linux/common/sys/*.h` ; do \
		$(LN) -fs $$i .; \
	done; \
	if [ -d ../../libc/sysdeps/linux/$(TARGET_ARCH)/sys ] ; then \
		for i in `ls ../../libc/sysdeps/linux/$(TARGET_ARCH)/sys/*.h` ; do \
			$(LN) -fs $$i .; \
		done; \
	fi
	$(Q)\
	set -e; \
	cd $(top_builddir); \
	tmp=`mktemp include/bits/sysnum.h.XXXXXX 2>/dev/null`; \
	[ -z "$$tmp" ] && tmp='include/bits/sysnum.h.new'; \
	KERNEL_HEADERS="${KERNEL_HEADERS}" top_builddir=. CC="$(CC) $(CPU_CFLAGS)" $(SHELL) extra/scripts/gen_bits_syscall_h.sh > $$tmp; \
	if cmp include/bits/sysnum.h $$tmp >/dev/null 2>&1; then \
		$(RM) $$tmp; \
	else \
		mv -f $$tmp include/bits/sysnum.h; \
	fi
ifeq ($(UCLIBC_HAS_LOCALE),y)
	$(MAKE) locale_headers
endif

pregen: headers

install: install_runtime install_dev


RUNTIME_PREFIX_LIB_FROM_DEVEL_PREFIX_LIB=$(shell $(top_srcdir)extra/scripts/relative_path.sh $(DEVEL_PREFIX)lib $(RUNTIME_PREFIX)lib)

# Installs header files.
install_headers:
	$(INSTALL) -d $(PREFIX)$(DEVEL_PREFIX)include
	printf ".svn\n.cvsignore\nCVS\n" > tar_exclude ; \
	$(TAR) -chf - -X tar_exclude include \
		| $(TAR) -xf - -C $(PREFIX)$(DEVEL_PREFIX)
	rm -f tar_exclude
	printf '#ifndef _LIBC_INTERNAL_H\n#define _LIBC_INTERNAL_H 1\n#endif\n' > \
		$(PREFIX)$(DEVEL_PREFIX)include/libc-internal.h
	echo '/* Dont use _syscall#() macros; use the syscall() function */' > \
		$(PREFIX)$(DEVEL_PREFIX)include/bits/syscalls.h
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/dl-osinfo.h
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/_lfs_64.h
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/bits/uClibc_uintmaxtostr.h
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/bits/kernel_sigaction.h
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/bits/kernel_stat.h
ifneq ($(UCLIBC_HAS_FLOATS),y)
	# Remove floating point related headers since float support is disabled.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/complex.h
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/fpu_control.h
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/ieee754.h
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/math.h
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/tgmath.h
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/bits/uClibc_fpmax.h
endif
ifneq ($(UCLIBC_HAS_WCHAR),y)
	# Remove wide char headers since wide char support is disabled.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/wctype.h
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/wchar.h
endif
ifneq ($(UCLIBC_HAS_LOCALE),y)
	# Remove iconv header since locale support is disabled.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/iconv.h
endif
ifneq ($(UCLIBC_HAS_GLIBC_CUSTOM_PRINTF),y)
	# Remove printf header since custom print specifier support is disabled.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/printf.h
endif
ifneq ($(UCLIBC_HAS_XLOCALE),y)
	# Remove xlocale header since extended locale support is disabled.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/xlocale.h
endif
ifneq ($(UCLIBC_HAS_GETTEXT_AWARENESS),y)
	# Remove libintl header since gettext support is disabled.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/libintl.h
endif
ifneq ($(UCLIBC_HAS_REGEX),y)
	# Remove regex headers since regex support is disabled.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/regex.h
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/regexp.h
endif
ifneq ($(UCLIBC_HAS_WORDEXP),y)
	# Remove wordexp header since wordexp support is disabled.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/wordexp.h
endif
ifneq ($(UCLIBC_HAS_FTW),y)
	# Remove ftw header since ftw support is disabled.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/ftw.h
endif
ifneq ($(UCLIBC_HAS_GLOB),y)
	# Remove glob header since glob support is disabled.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/glob.h
endif
ifneq ($(UCLIBC_HAS_GNU_GETOPT),y)
ifneq ($(UCLIBC_HAS_GETOPT_LONG),y)
	# Remove getopt header since gnu getopt support is disabled.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/getopt.h
endif
endif
ifneq ($(UCLIBC_HAS_SHADOW),y)
	# Remove shadow header since shadow password support is disabled.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/shadow.h
endif
ifneq ($(PTHREADS_DEBUG_SUPPORT),y)
	# Remove thread_db header since thread debug support is disabled.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/thread_db.h
endif
ifneq ($(UCLIBC_HAS_THREADS),y)
	# Remove pthread headers since thread support is disabled.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/*thread*.h
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/semaphore.h
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/bits/*thread*.h
endif
ifeq ($(UCLIBC_HAS_THREADS_NATIVE),y)
	# Remove this as it is only used internally.
	$(RM) $(PREFIX)$(DEVEL_PREFIX)include/tls.h
endif
	-@for i in `find $(PREFIX)$(DEVEL_PREFIX)include -type d` ; do \
	    chmod 755 $$i; chmod 644 $$i/*.h > /dev/null 2>&1; \
	done
	-chown -R `id | sed 's/^uid=\([0-9]*\).*gid=\([0-9]*\).*$$/\1:\2/'` $(PREFIX)$(DEVEL_PREFIX)include

# Installs development library links.
install_dev: install_headers
	$(INSTALL) -d $(PREFIX)$(DEVEL_PREFIX)lib
	-$(INSTALL) -m 644 lib/*.[ao] $(PREFIX)$(DEVEL_PREFIX)lib/
ifeq ($(HAVE_SHARED),y)
	for i in `find lib/ -type l -name 'lib[a-zA-Z]*.so' | \
	sed -e 's/lib\///'` ; do \
		$(LN) -sf $(RUNTIME_PREFIX_LIB_FROM_DEVEL_PREFIX_LIB)$$i.$(MAJOR_VERSION) \
		$(PREFIX)$(DEVEL_PREFIX)lib/$$i; \
	done
	if [ -f $(top_builddir)lib/libc.so -a -f $(PREFIX)$(RUNTIME_PREFIX)lib/$(SHARED_MAJORNAME) ] ; then \
		$(RM) $(PREFIX)$(DEVEL_PREFIX)lib/libc.so; \
		sed -e 's:$(NONSHARED_LIBNAME):$(DEVEL_PREFIX)lib/$(NONSHARED_LIBNAME):' \
		    -e 's:$(SHARED_MAJORNAME):$(RUNTIME_PREFIX)lib/$(SHARED_MAJORNAME):' \
		    -e 's:$(UCLIBC_LDSO):$(RUNTIME_PREFIX)lib/$(UCLIBC_LDSO):' \
		    $(top_builddir)lib/libc.so > $(PREFIX)$(DEVEL_PREFIX)lib/libc.so; \
	fi
ifeq ($(UCLIBC_HAS_THREADS),y)
ifneq ($(LINUXTHREADS_OLD),y)
	if [ -f $(top_builddir)lib/libpthread.so -a -f $(PREFIX)$(RUNTIME_PREFIX)lib/libpthread.so.$(MAJOR_VERSION) ] ; then \
		$(RM) $(PREFIX)$(DEVEL_PREFIX)lib/libpthread.so; \
		cp $(top_srcdir)extra/scripts/format.lds $(PREFIX)$(DEVEL_PREFIX)lib/libpthread.so; \
		echo "GROUP ( $(RUNTIME_PREFIX)lib/libpthread.so.$(MAJOR_VERSION) $(DEVEL_PREFIX)lib/libpthread_nonshared.a )" \
			>> $(PREFIX)$(DEVEL_PREFIX)lib/libpthread.so; \
	fi
endif
endif
ifeq ($(PTHREADS_DEBUG_SUPPORT),y)
	$(LN) -sf $(RUNTIME_PREFIX_LIB_FROM_DEVEL_PREFIX_LIB)libthread_db.so.1 \
		$(PREFIX)$(DEVEL_PREFIX)lib/libthread_db.so
endif
ifeq ($(DOPIC),y)
#	# If we build shared libraries then the static libs are PIC...
#	# Make _pic.a symlinks to make mklibs.py and similar tools happy.
	if [ -d lib ] ; then \
		for i in `find lib/  -type f -name 'lib*.a' | sed -e 's/lib\///'` ; do \
			$(LN) -sf $$i $(PREFIX)$(DEVEL_PREFIX)lib/`echo $$i \
				| sed -e 's/\.a$$/_pic.a/'`; \
		done ; \
	fi
endif
endif
ifeq ($(UCLIBC_FORMAT_SHARED_FLAT),y)
	for file in lib/lib*.gdb; do \
		if test -f $$file; then \
			$(INSTALL) -m 755 $$file $(PREFIX)$(DEVEL_PREFIX)lib; \
			$(INSTALL) -m 755 `echo $$file | sed 's/\.gdb$$//'` \
			  $(PREFIX)$(DEVEL_PREFIX)lib; \
		fi; \
	done
endif

# Installs run-time libraries
install_runtime:
ifeq ($(HAVE_SHARED),y)
	$(INSTALL) -d $(PREFIX)$(RUNTIME_PREFIX)lib
	$(INSTALL) -m 644 lib/lib*-$(VERSION).so \
		$(PREFIX)$(RUNTIME_PREFIX)lib
	cd lib && $(TAR) -cf - *.so.* | $(TAR) -xf - -C $(PREFIX)$(RUNTIME_PREFIX)lib
	@if [ -x lib/$(UCLIBC_LDSO_NAME)-$(VERSION).so ] ; then \
		set -e; \
		$(SHELL_SET_X); \
		$(INSTALL) -m 755 lib/$(UCLIBC_LDSO_NAME)-$(VERSION).so \
			$(PREFIX)$(RUNTIME_PREFIX)lib; \
	fi
endif

utils:
	$(Q)$(MAKE) CROSS="$(CROSS)" CC="$(CC)" -C utils

# Installs helper applications, such as 'ldd' and 'ldconfig'
install_utils: utils
	$(MAKE) CROSS="$(CROSS)" CC="$(CC)" -C utils utils_install

else # ifeq ($(HAVE_DOT_CONFIG),y)

all: menuconfig

headers:
	@echo "Need to make a config file first, run: make menuconfig"
	@false

endif # ifeq ($(HAVE_DOT_CONFIG),y)

include/bits:
#	$(INSTALL) -d include/bits

# configuration
# ---------------------------------------------------------------------------
clean:
	$(Q)$(RM) -r lib include/bits
	$(RM) lib*/*.a ldso/*/*.a libpthread/*/*.a
	$(RM) include/fpu_control.h include/dl-osinfo.h include/hp-timing.h
#	$(MAKE) -C extra/locale locale_clean
	$(MAKE) headers_clean-y
	$(RM) libc.a libcrypt.a libm.a crt1.o
#	$(MAKE) -s -C test clean
#	$(MAKE) -C utils utils_clean
	@set -e; \
	for i in `(cd libc/sysdeps/linux/common/sys; ls *.h)` ; do \
		$(RM) include/sys/$$i; \
	done; \
	if [ -d libc/sysdeps/linux/$(TARGET_ARCH)/sys ] ; then \
		for i in `(cd libc/sysdeps/linux/$(TARGET_ARCH)/sys; ls *.h)` ; do \
			$(RM) include/sys/$$i; \
		done; \
	fi
	@$(RM) include/linux include/asm*
	-find . \( -name \*.o -o -name \*.os -o -name \*.oS \) -exec $(RM) {} \;

distclean: clean
	-find . \( -name core -o -name \*.orig -o -name \*~ \) -exec $(RM) {} \;
	$(RM) .config .config.old .config.cmd
	$(RM) extra/locale/*.tgz
#	$(MAKE) -C extra/config distclean

dist release:
	$(RM) -r ../uClibc-$(VERSION) ../uClibc-$(VERSION).tar.bz2
	svn -q export . ../uClibc-$(VERSION)
	$(TAR) cjf ../uClibc-$(VERSION).tar.bz2 -C .. uClibc-$(VERSION)
	du -b ../uClibc-$(VERSION).tar.bz2

#test check:
#	$(Q)$(MAKE) -C test
